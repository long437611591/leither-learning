@startuml

together {
interface Aware
interface ApplicationContextAware
interface ApplicationEventPublisherAware
interface RabbitListenerContainerFactory<C extends MessageListenerContainer> {
   C createListenerContainer(@Nullable RabbitListenerEndpoint var1);
   default C createListenerContainer() {return this.createListenerContainer((RabbitListenerEndpoint)null)};
}
abstract class AbstractRabbitListenerContainerFactory<C>{
  public C createListenerContainer(RabbitListenerEndpoint endpoint){this.createContainerInstance();messageConverter ...endpoint.setupListenerContainer(instance);};
  protected abstract C createContainerInstance();
}
class DirectRabbitListenerContainerFactory<DirectMessageListenerContainer>{
  public DirectMessageListenerContainer createContainerInstance(){return new DirectMessageListenerContainer()};
}
class SimpleRabbitListenerContainerFactory<SimpleRabbitListenerContainer>{
  public SimpleRabbitListenerContainer createContainerInstance(){return new SimpleRabbitListenerContainer()};
}
}

'note top of Aware: "Top interface"
Aware <|-- ApplicationContextAware
Aware <|-- ApplicationEventPublisherAware
RabbitListenerContainerFactory <|... AbstractRabbitListenerContainerFactory
ApplicationContextAware <|... AbstractRabbitListenerContainerFactory
ApplicationEventPublisherAware <|... AbstractRabbitListenerContainerFactory
AbstractRabbitListenerContainerFactory <|-- DirectRabbitListenerContainerFactory
AbstractRabbitListenerContainerFactory <|-- SimpleRabbitListenerContainerFactory

together {
  class RabbitListenerEndpointRegistry{
  registerListenerContainer(descriptor.endpoint, this.resolveContainerFactory(descriptor));
  }
  interface BeanFactoryAware{}
  interface InitializingBean{}
  class RabbitListenerEndpointRegistrar{
  RabbitListenerEndpointRegistry endpointRegistry;
  protected void registerAllEndpoints();
  void registerEndpoint(RabbitListenerEndpoint endpoint, @Nullable RabbitListenerContainerFactory<?> factory){};
  }
}
class AmqpListenerEndpointDescriptor{
      private final RabbitListenerEndpoint endpoint;
      private final RabbitListenerContainerFactory<?> containerFactory;
}

RabbitListenerEndpointRegistrar *-- RabbitListenerContainerFactory
RabbitListenerEndpointRegistrar *-- RabbitListenerEndpointRegistry
BeanFactoryAware  <|... RabbitListenerEndpointRegistrar
InitializingBean  <|... RabbitListenerEndpointRegistrar
RabbitListenerEndpointRegistrar +-- AmqpListenerEndpointDescriptor


@enduml